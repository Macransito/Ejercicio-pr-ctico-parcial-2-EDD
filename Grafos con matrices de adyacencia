class Graph:
    def __init__(self, num_vertices):
        # Inicializa la estructura del grafo con el nÃºmero de vÃ©rtices dado
        self.num_vertices = num_vertices
        # Crea una matriz de adyacencia inicializada con ceros
        self.adj_matrix = [[0] * num_vertices for _ in range(num_vertices)]

    def add_edge(self, v1, v2):
        if v1 >= 0 and v1 < self.num_vertices and v2 >= 0 and v2 < self.num_vertices:
            # Agrega una arista entre los vÃ©rtices v1 y v2
            # Establece el valor de la matriz de adyacencia en 1
            self.adj_matrix[v1][v2] = 1
            self.adj_matrix[v2][v1] = 1

    def remove_edge(self, v1, v2):
        if v1 >= 0 and v1 < self.num_vertices and v2 >= 0 and v2 < self.num_vertices:
            # Elimina la arista entre los vÃ©rtices v1 y v2
            # Establece el valor de la matriz de adyacencia en 0
            self.adj_matrix[v1][v2] = 0
            self.adj_matrix[v2][v1] = 0

    def print_graph(self):
        # Imprime la matriz de adyacencia del grafo
        for row in self.adj_matrix:
            print(row)


# Ejemplo de uso
g = Graph(5)
g.add_edge(0, 1)
g.add_edge(0, 4)
g.add_edge(1, 2)
g.add_edge(1, 3)
g.add_edge(1, 4)
g.add_edge(2, 3)
g.add_edge(3, 4)

g.print_graph()
